FROM nvcr.io/nvidia/l4t-jetpack:r35.4.1

WORKDIR /charlie

RUN echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal main restricted universe multiverse" > /etc/apt/sources.list && \
    echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates main restricted universe multiverse" >> /etc/apt/sources.list && \
    echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-security main restricted universe multiverse" >> /etc/apt/sources.list && \
    echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-backports main restricted universe multiverse" >> /etc/apt/sources.list
RUN apt-get clean
RUN apt-get update -y

RUN echo "deb https://repo.download.nvidia.com/jetson/common r35.4 main" > /etc/apt/sources.list.d/nvidia-l4t-apt-source.list
RUN echo "deb https://repo.download.nvidia.com/jetson/t234 r35.4 main" >> /etc/apt/sources.list.d/nvidia-l4t-apt-source.list

RUN apt-get update -y

RUN apt-get install -y build-essential cmake git zsh vim wget pkg-config libssl-dev python3 python3-venv python3-pip python3-dev

RUN wget https://github.com/Kitware/CMake/releases/download/v3.18.6/cmake-3.18.6.tar.gz \
    && tar -zxvf cmake-3.18.6.tar.gz \
    && cd cmake-3.18.6 \
    && ./bootstrap && make -j$(nproc) && make install \
    && cd .. && rm -rf cmake-3.18.6 cmake-3.18.6.tar.gz

RUN git clone https://github.com/ggml-org/llama.cpp

RUN apt-get install -y ccache

# copy this for purpose of creating a symlink
WORKDIR /usr/local/cuda-11.4/targets/aarch64-linux/lib/stubs

# should create a symlink to the libcuda.so.1 so it can be found during build time TODO: but it isn't working?
RUN ln -sf libcuda.so libcuda.so.1

ENV CUDA_HOME=/usr/local/cuda-11.4
ENV LD_LIBRARY_PATH=/usr/local/cuda-11.4/targets/aarch64-linux/lib/stubs:/usr/local/cuda-11.4/targets/aarch64-linux/lib:/usr/local/cuda-11.4/lib64:/usr/lib/aarch64-linux-gnu

WORKDIR /charlie/llama.cpp

RUN cmake -B build -DGGML_CUDA=ON \
      		   -DLLAMA_CURL=OFF \
                   -DCMAKE_CUDA_COMPILER=/usr/local/cuda-11.4/bin/nvcc \
 		   -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                   -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
		   -DCMAKE_CUDA_ARCHITECTURES=72 \
		   -DGGML_CUDA_FA=OFF \
    && cmake --build build --config Release -j$(nproc)

WORKDIR /charlie

ENV TORCH_CUDA_ARCH_LIST="7.2"

RUN python3 -m venv .venv
COPY requirements.txt .
RUN . .venv/bin/activate && pip install --upgrade pip setuptools wheel && pip install -r requirements.txt
