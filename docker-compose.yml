services:
  llama-cpp-env:
    platform: linux/arm64
    image: nvcr.io/nvidia/l4t-jetpack:r35.4.1

    # build:
    #   context: ./llama.cpp
    #   dockerfile: .devops/cuda.Dockerfile
    #   args:
    #     LLAMA_CUDA: 1
    #     #UBUNTU_VERSION: 20.04
    #     CUDA_VERSION: "11.2.2"
    #     CUDa_DOCKER_ARCH: "default"
        # cannot use jetpack images from nvidia registry here because it is for arm architecture and my laptop is x86
        # BASE_CUDA_RUN_CONTAINER: "nvcr.io/nvidia/l4t-base:r35.2.1"  # JetPack 5.2 runtime
        # BASE_CUDA_DEV_CONTAINER: "nvcr.io/nvidia/l4t-base:r35.2.1"  # JetPack 5.2 devel
    container_name: cpp-profiler
    volumes:
      # llama.cpp install
      - ./install_llama_cpp.sh:/charlie/install_llama_cpp.sh
    entrypoint: ["/bin/bash"]
    tty: true

    runtime: nvidia    

    #   NVIDIA_DRIVER_CAPABILITIES: compute,utility

    # using gpu
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# volume for persistant file storage just in case, could use for big gguf files (right now I am mounting the volume)
# volumes:
#   model-cache:
#     driver: local
