FROM --platform linux/arm64 nvcr.io/nvidia/l4t-jetpack:r35.4.1 AS base_l4t

WORKDIR /charlie

RUN apt-get update && apt-get install -y \
    build-essential cmake git zsh neovim
    # Add any other packages you need
# config directory for neovim
RUN mkdir -p /root/.config/nvim
#COPY --chown=0:0 dotfiles/.zshrc /root/.zshrc
#COPY --chown=0:0 dotfiles/nvim/ /root/.config/nvim/
#COPY --chown=0:0 dotfiles/.oh-my-zsh/ /root/.oh-my-zsh/




#FROM ubuntu:20.04

#ENV CMAKE_VERISON=3.18

#RUN echo "Installing and building llama.cpp"

#RUN apt-get update -y
#RUN apt-get upgrade -y

#ENV DEBIAN_FRONTEND=noninteractive

COPY install_llama_cpp.sh

# To build llama.cpp, you need cmake 3.18
#RUN apt-get install wget build-essential pkg-config libssl-dev git -y \
#       && wget https://github.com/Kitware/CMake/releases/download/v3.18.6/cmake-3.18.6.tar.gz \
#       && tar -zxvf cmake-3.18.6.tar.gz \
#       && cd cmake-3.18.6 \
#       && ./bootstrap && make -j$(nproc) && make install \
#       && cd .. && rm -rf cmake-3.18.6 cmake-3.18.6.tar.gz

#WORKDIR /workspace

#RUN git clone https://github.com/ggml-org/llama.cpp

#ENV DCMAKE_CUDA_COMPILER=/usr/local/cuda-11.4/bin/nvcc

# for cuda build of llama.cpp
#WORKDIR /workspace/llama.cpp
#RUN cmake -B build -DGGML_CUDA=ON -DLLAMA_CURL=OFF -DCMAKE_CUDA_COMPILER=/usr/local/cuda-11.4/bin/nvcc
#RUN cmake -B build -DGGML_CUDA=ON -DLLAMA_CURL=OFF
#RUN cmake --build build --config Release

